
3 layers to matplotlib API:

1. ARTISTS 
    a) primitives - Line2D, Rectangle, Text, AxesImage, etc. Usually the things you want to configure:
        the font of a Text object, width of a Line2D. 
    b) containters - places to put primitives - Axis, Axes, Figure. Containers also have some
        configurable properties, such as the xscale property of an Axes.
2. RENDERER
3. FIGURECANVAS

Artists know how to use the Rederer which knows how to draw on the FigureCanvas

The interactive property of the pyplot interface controls whether a figure canvas is drawn on 
every pyplot command. 
interactive mode - every pyplot command triggers a draw(). 

non interactive mode - figure state is updated on every plot command, but will only be drawn
on explicit calls to draw(). 


Every element in the figure is represented by an Artist. Every Artist has customizable properties,
such as transparency, the axes it lives in, if any, the figure it lives in, if any. 
Artist properties are accessed with setter and getter functions. 

Figure - the top level containter Artist (matplotlib.figure.Figure). The figure maintains the concept 
of "current axes".

The matplotlib.axes.Axes contains the vast majority of the Artists used in a figure, with many helper
methods to create and add these Artists to itself, and to access and customize them. It has a list of 
Line2Ds, if any. The plot() method on Axes creates a Line2D and adds it to the list, and returns the
container of lines. The bar() creates a list of rectangles, adds these to the Axes.patches list. 
Axes objects contain Artists, including 2 important Artist containers: XAxis and YAxis, which handle
drawing of ticks and labels. They are stored as instance variables xaxis and yaxis. But, Axes contains
many helper methods which forward calls to the Axis instances, so often you don't need to work
with them directly. 

Subplot is just a subclass of Axes. It creates a rectangular grid of Axes according to the argument. 
You can also place axes at arbitrary locations using plt.axes([])

Multiple figures can be created by using multiple figure() calls with an increasing argument. 